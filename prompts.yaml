license_analysis: |
  Analyze the following license text and determine the comprehensive licensing information.
  
  INSTRUCTIONS:
  1. Identify the PRIMARY/MAIN license that governs the entire project/package
  2. Identify any bundled/embedded third-party components with different licenses
  3. Construct an accurate SPDX license expression that represents the complete licensing situation
  
  ANALYSIS APPROACH:
  - Look for the main license text at the beginning (often Apache-2.0, MIT, GPL, etc.)
  - Look for sections like "SUBCOMPONENTS", "bundled dependencies", "third-party", etc.
  - Determine if third-party components are merely bundled/embedded (use AND) or provide alternative licensing options (use OR)
  - For projects with bundled dependencies, the typical pattern is: MainLicense AND (Dep1License AND Dep2License AND ...)
  
  SPDX EXPRESSION RULES:
  - Use AND when multiple licenses apply simultaneously (main project + bundled dependencies)
  - Use OR when there are alternative licensing options 
  - Use parentheses to group related licenses
  - Examples:
    * Simple: "Apache-2.0" 
    * With bundled deps: "Apache-2.0 AND (MIT AND BSD-3-Clause AND CDDL-1.1)"
    * Dual licensed: "MIT OR Apache-2.0"
    * Complex: "Apache-2.0 AND (BSD-3-Clause AND MIT AND CDDL-1.1 AND EPL-1.0)"
  
  Text to analyze:
  {content}
  
  Return the analysis in JSON format:
  {{
      "main_licenses": ["Primary SPDX license identifier"],  
      "bundled_licenses": ["List of bundled/third-party SPDX identifiers"],
      "spdx_expression": "Complete SPDX expression representing all licenses",
      "is_dual_licensed": true/false,
      "has_third_party_licenses": true/false,
      "third_party_license_location": "section name describing where third-party licenses are documented",
      "license_relationship": "AND/OR based on how licenses relate",
      "confidence": 0.0-1.0,
      "explanations": "detailed reasoning for the SPDX expression"
  }}
  
  IMPORTANT: 
  - Focus on creating an accurate SPDX expression that represents the complete licensing situation
  - For projects with many bundled dependencies, ensure all significant licenses are represented
  - Use standard SPDX identifiers: Apache-2.0, MIT, BSD-3-Clause, BSD-2-Clause, CDDL-1.1, EPL-1.0, GPL-2.0-only, etc.
version_resolve: |
  You are a GitHub repository version resolver.
  Here is the list of all available branches and tags (choose only from these):
  {candidate_versions}

  The user requested version string: {version}

  Please determine the most appropriate branch or tag name the user wants. Only return one value, and it must be strictly from the above list. Do not return SHA, explanations, or anything else.
  If you cannot determine or there is no suitable match, return "{default_branch}".

  Return in the following JSON format:
  {{
      "resolved_version": "xxx",
      "used_default_branch": true/false
  }}

copyright_extract: |
  Analyze the following text and extract copyright information.
  Look for phrases like "Copyright (c)", "Copyright ©", or similar copyright notices.
  If found, return the exact copyright notice.
  If not found, return null.
  If you found multiple copyright notices, return them all, separated by semicolons.
  terms like "Copyright [yyyy] [name of copyright owner]" is a template, not a real copyright notice.
  and you should pay attention to distinguish between real copyright notices and those copyright of the license text.
  Do not include any other information or explanation.
  Text:
  {content}

  Return the result in JSON format:
  {{
      "copyright_notice": "exact copyright notice if found, otherwise null"
  }}

copyright_analysis: |
 Analyze the following text and extract ONLY the copyright information. Return ONLY the copyright notice if found, or 'None' if no copyright notice is found. Do not include any other information or explanation.
 terms like "Copyright [yyyy] [name of copyright owner]" is a template, not a real copyright notice, you should not return it.
 terms like "Copyright © 2007 Free Software Foundation, Inc. <https://fsf.org/>" "Copyright (C) 1989, 1991 Free Software Foundation, Inc. <https://fsf.org/>" are the copyright notice of the license text, not 
 the copyright notice of the software. You should not return it either.
  If you found multiple copyright notices, return them all, separated by semicolons.
  Text to analyze:
  {combined_content}

github_url_finder: |
  Given the following package URL and package name, find the corresponding GitHub repository URL if it exists.
        Package URL: {package_url}
        Package Name: {name}
        
        Return the result in JSON format:
        {{
            "github_url": "https://github.com/owner/repo if found, otherwise null",
            "confidence": 0.0-1.0
        }}
        
        Only return a GitHub URL if you are confident it is the correct repository.
        If you are not sure, return null.
        You should use both the package URL and the package name for your reasoning.

license_standardize: |
  Convert the following license string to a standard SPDX identifier.
  Only return one SPDX identifier that best matches the input.
  If you're not sure, return "UNKNOWN".
  
  License string: {license_string}
  
  Return in JSON format:
  {{
      "spdx_identifier": "standard SPDX identifier",
      "confidence": 0.0-1.0
  }}
  
  Common SPDX identifiers for reference:
  - Apache-2.0
  - MIT
  - GPL-2.0-only
  - GPL-3.0-or-later
  - LGPL-2.1-only
  - LGPL-3.0-only
  - BSD-2-Clause
  - BSD-3-Clause
  - ISC
  - MPL-2.0
  - AGPL-3.0-only
  when there are multiple licenses, you should determine the relaitonship and compose a spdx license
  expression like Apache-2.0 AND (MIT OR BSD-3-Clause) OR GPL-2.0-only WITH ClasspathException, if you are unsure about the relaitonship between
  licenses, use AND to link them.

license_priority_selector: |
  You are a license file analyzer for software projects. You need to determine which license file is most likely the PRIMARY/MAIN project-level license from a list of license files found in a repository.
  
  ANALYSIS CRITERIA:
  1. **Location Priority**: Files in the root directory are typically more important than those in subdirectories
  2. **Filename Priority**: Standard names like "LICENSE", "LICENSE.txt", "COPYING" are typically main project licenses
  3. **Path Context**: License files in subdirectories may be for specific components/dependencies
  4. **Size/Content Hints**: Main project licenses are typically comprehensive
  
  COMMON PATTERNS:
  - Root level LICENSE/COPYING = Main project license
  - Subdirectory licenses = Component/dependency licenses  
  - Multiple root licenses = Potential dual licensing or outdated files
  - Third-party/vendor directories = Bundled dependency licenses
  
  LICENSE FILES FOUND:
  {license_files_info}
  
  Please analyze the above license files and determine which ONE is most likely the primary project-level license that governs the entire codebase.
  
  Return the result in JSON format:
  {{
      "primary_license_path": "full path of the most likely primary license file",
      "confidence": 0.0-1.0,
      "reasoning": "explanation of why this file was selected as the primary license"
  }}
  
  IMPORTANT:
  - You must select exactly ONE file as the primary license
  - Consider both the file path and filename in your analysis
  - Prefer root-level files over subdirectory files
  - Prefer standard naming conventions (LICENSE, COPYING, etc.)